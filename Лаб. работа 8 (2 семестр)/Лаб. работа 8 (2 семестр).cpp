#include <iostream>
#include <cassert>
#include "matrix.h"

using mt::Mat22d;
using mt::Vec2d;
using mt::Mat33d;
/*Ла,ораторная работа №8
«Шаблоны и тестирование»

Возьмите за основу репозиторий mathutils (https://gitlab.com/mishklgpmi/mathutils).
Дополните класс методами для нахождения определителя матрицы размерами 2х2 и 3х3. Для других размеров предусмотрите сообщение «Операция не поддерживается».
Дополните класс методом для нахождения обратной матрицы размером 2х2 и 3х3. Для остальных размеров предусмотрите сообщение «Операция не поддерживается».
Дополните класс методами для нахождения транспонированной матрицы произвольного размера.
Методы должны быть шаблонными.
На каждый метод или оператор напишите по одному тесту (пример теста есть в main.cpp в репозитории mathutils).
*/
int main()
{
	setlocale(LC_ALL, "Rus");
	std::cout << "=== Test 1 ===" << std::endl;

	{
		Mat22d A({ {
			 {1,2},
			 {3,4}
		} });
		Mat22d B = A.Tmatrix();
		assert(B.get(1,1) == 4);
		assert(B.get(0, 1) == 3);
		std::cout << B;
	}

	std::cout << "Обратная матрица построена!" << std::endl;

	std::cout << "=== Test 2 ===" << std::endl;

	{
		Mat33d A({ {
			 {1,2,3},
			 {4,5,6},
			{7,8,10},
		} });
		Mat22d B({ {
			 {1,2},
			 {3,4}
		} });
		assert(A.Det() == -3);
		assert(B.Det() == -2);
		std::cout << A.Det() << std::endl;
	}

	std::cout << "Определитель найден!" << std::endl;
	std::cout << "=== Test 3 ===" << std::endl;

	{
		Mat33d A({ {
			 {1,2,3},
			 {4,5,6},
			{7,8,10},
		} });
		std::cout << A.RMatrix() << std::endl;
	}

	std::cout << "Обратная матрица построена!" << std::endl;

	return 0;
}